#!env/bin/python
import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text
import json
from random import randint

import remove_background
from pathlib import Path
from settings import stor_path
from io import BytesIO

with open('remove.bg api key.txt') as secret:
    secret = json.loads(secret.read())

# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token=secret['tg_token'])
# –î–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è –±–æ—Ç–∞
dp = Dispatcher(bot)
# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)

dest_path = ''


# –º—É—Ç–∏—Ç –ø—É—Ç—å
def setup():
    global dest_path
    dest_path = Path(stor_path)
    if not dest_path.is_absolute():
        dest_path = Path.cwd() / dest_path
    if not dest_path.exists():
        dest_path.mkdir()


def newfilename(dir: Path):
    last = max([int(f.stem) for f in dir.iterdir() if f.stem.isdigit()] + [0])
    return dir / f'{last + 1}.jpg'
    ### –≤—Å–µ–≥–¥–∞ –ª–∏ jpg ???


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@dp.message_handler(commands="start")
async def cmd_test1(message: types.Message):
    await message.answer("Hi! This bot can prepare your images to become stickers: \n"
                         "1) Remove background with very clever computer vision AI algorithms (¬© rembg and api.remove.bg)\n"
                         "2) Add white stroke to the image using openCV lib\n"
                         "3) Resize image to fit to 512px\n"
                         "4) Profit!\n"
                         "ps. In future versions we could add autocreating stickerpacks for ya")


@dp.message_handler(content_types=['photo'])
async def type_test(message: types.Message):
    await message.answer(f"processing your image, please wait...")
    dest = Path(dest_path) / message.from_user.username
    if not dest.exists():
        dest.mkdir()
    new_name = newfilename(dest)
    raw = await message.photo[-1].download(destination_file=new_name)
    # b = BytesIO()
    # b.write(raw.raw)
    # with open('testfile.jpg', 'wb') as f:
    #     f.write(b.getvalue())
    ###
    ready = remove_background.complete_local(new_name)

    await message.answer_document(open(ready, 'rb'), 'here you are')


# —Ç–µ—Å—Ç –æ–±–æ–ª–æ—á–∫–∞ –¥–ª—è –≤—Å–µ–≥–æ
@dp.message_handler(content_types=types.ContentTypes.all())
async def type_test(message: types.Message):
    await message.answer(f"this was {message.content_type} "
                         f"from userid {message.from_user.id}"
                         f" username {message.from_user.username}")


@dp.message_handler(commands="dice")
async def cmd_dice(message: types.Message):
    await message.answer_dice(emoji="üé≤")


@dp.message_handler(commands="inline_url")
async def cmd_inline_url(message: types.Message):
    buttons = [
        types.InlineKeyboardButton(text="GitHub", url="https://github.com"),
        types.InlineKeyboardButton(text="–û—Ñ. –∫–∞–Ω–∞–ª Telegram", url="tg://resolve?domain=telegram")
    ]
    keyboard = types.InlineKeyboardMarkup(row_width=3)
    keyboard.add(*buttons)
    await message.answer("–ö–Ω–æ–ø–∫–∏-—Å—Å—ã–ª–∫–∏", reply_markup=keyboard)


@dp.message_handler(commands="random")
async def cmd_random(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–ù–∞–∂–º–∏ –º–µ–Ω—è", callback_data="random_value"))
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10", reply_markup=keyboard)


@dp.callback_query_handler(text="random_value")
async def send_random_value(call: types.CallbackQuery):
    await call.message.answer(str(randint(1, 10)))
    await call.answer(text="–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –±–æ—Ç–æ–º!", show_alert=True)  # —à–æ–ø –Ω–µ–±—ã–ª–æ —á–∞—Å–∏–∫–æ–≤
    # –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ await call.answer()


user_data = {}


def get_keyboard():
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.
    buttons = [
        types.InlineKeyboardButton(text="-1", callback_data="num_decr"),
        types.InlineKeyboardButton(text="+1", callback_data="num_incr"),
        types.InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="num_finish")
    ]
    # –ë–ª–∞–≥–æ–¥–∞—Ä—è row_width=2, –≤ –ø–µ—Ä–≤–æ–º —Ä—è–¥—É –±—É–¥–µ—Ç –¥–≤–µ –∫–Ω–æ–ø–∫–∏, –∞ –æ—Å—Ç–∞–≤—à–∞—è—Å—è –æ–¥–Ω–∞
    # —É–π–¥—ë—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É
    keyboard = types.InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)
    return keyboard


async def update_num_text(message: types.Message, new_value: int):
    # –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Ç–æ–π –∂–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    await message.edit_text(f"–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ: {new_value}", reply_markup=get_keyboard())


@dp.message_handler(commands="numbers")
async def cmd_numbers(message: types.Message):
    user_data[message.from_user.id] = 0
    await message.answer("–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ: 0", reply_markup=get_keyboard())


@dp.callback_query_handler(Text(startswith="num_"))
async def callbacks_num(call: types.CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ª–∏–±–æ —Å—á–∏—Ç–∞–µ–º –µ–≥–æ —Ä–∞–≤–Ω—ã–º 0
    user_value = user_data.get(call.from_user.id, 0)
    # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä `num_incr` -> `incr`
    action = call.data.split("_")[1]
    if action == "incr":
        user_data[call.from_user.id] = user_value + 1
        await update_num_text(call.message, user_value + 1)
    elif action == "decr":
        user_data[call.from_user.id] = user_value - 1
        await update_num_text(call.message, user_value - 1)
    elif action == "finish":
        # –ï—Å–ª–∏ –±—ã –º—ã –Ω–µ –º–µ–Ω—è–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        # –≤—ã–∑–æ–≤–æ–º await call.message.delete_reply_markup().
        # –ù–æ —Ç.–∫. –º—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, 
        # —Ç–æ –æ–Ω–∞ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–∞ –∏ —Ç–∞–∫.
        await call.message.edit_text(f"–ò—Ç–æ–≥–æ: {user_value}")
    # –ù–µ –∑–∞–±—ã–≤–∞–µ–º –æ—Ç—á–∏—Ç–∞—Ç—å—Å—è –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–±—ç–∫–∞
    await call.answer()


if __name__ == "__main__":
    setup()
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    executor.start_polling(dp, skip_updates=True)
